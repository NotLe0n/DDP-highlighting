{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "DDP",
	"patterns": [
		{
			"include": "#kommentare"
		},
		{
			"include": "#schlüsselwörter"
		},
		{
			"include": "#struktur-construktor"
		},
		{
			"include": "#funktion-aufruf"
		},
		{
			"include": "#struktur-definition"
		},
		{
			"include": "#funktion-definition"
		},
		{
			"include": "#operatoren"
		},
		{
			"include": "#typ"
		},
		{
			"include": "#werte"
		},
		{
			"include": "#typ-ohne-artikel"
		},
		{
			"include": "#identifiers"
		}
	],
	"repository": {
		"kommentare": {
			"patterns": [
				{
					"name": "comment.line",
					"match": "(\/\/.*)"
				},
				{
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.ddp"
				}
			]
		},
		"schlüsselwörter": {
			"patterns": [
				{
					"name": "keyword.control.ddp",
					"match": "\\b(wenn|dann|sonst|aber|für|jede|solange|mache|macht|zurück|gib|vom|von|bis|mit Schrittgröße)\\b"
				},
				{
					"name": "meta.preprocessor",
					"match": "binde (\"\\w+\") ein",
					"captures": {
						"1": {
							"name": "meta.preprocessor.string"
						}
					}
				},
				{
					"name": "keyword.other.ddp",
					"match": "\\b(ist|sind|an|der Stelle)\\b"
				}
			]
		},
		"struktur-construktor": {
			"begin": "(\\w+){",
			"beginCaptures": {
				"1": {
					"name": "entity.name.class"
				}
			},
			"end": "}",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"funktion-aufruf": {
			"begin": "(\\w+)\\(",
			"beginCaptures": {
				"1":{
					"name": "entity.name.function.ddp"
				}
			},
			"end": "\\)",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"struktur-definition": {
			"match": "(die Struktur) (\\w+) (beschreibt)",
			"captures": {
				"1": {
					"name": "support.type.struct.ddp"
				},
				"2": {
					"name": "support.class.structname.ddp"
				},
				"3": {
					"name": "keyword.control.ddp"
				}
			}
		},
		"funktion-definition": {
			"begin": "^(die Funktion)",
			"beginCaptures": {
				"1": {
					"name": "support.type.ddp"
				}
			},
			"end": "(macht):",
			"endCaptures": {
				"1": {
					"name": "keyword.control.ddp"
				}
			},
			"patterns": [
				{
					"include": "#funktion-aufruf"
				},
				{
					"include": "#funktion-parameters"
				},
				{
					"include": "#funktion-type"
				}
			]
		},
		"funktion-type": {
			"match": "(vom) (Typ \\b(?:Zahl(?:en)?|Kommazahl(?:en)?|Booleans?|Buchstaben?|Texte?)\\b) ",
			"captures": {
				"1": {
					"name": "keyword.control.ddp"
				},
				"2": {
					"name": "support.type.function.ddp"
				}
			}
		},
		"operatoren": {
			"patterns": [
				{
					"name": "keyword.operator.new.ddp",
					"match": "\\b(oder|und|nicht|plus|minus|mal|durch|modulo|hoch|. wurzel von|logisch|kontra|gleich|ungleich|kleiner als|größer als|kleiner als, oder|größer als, oder|ln|Betrag|Stück)\\b"
				},
				{
					"name": "keyword.operator.new.trigo.ddp",
					"match": "\\b(Sinus|Kosinus|Tangens|Arkussinus|Arkuskosinus|Arkustangens|Hyperbelsinus|Hyperbelkosinus|Hyperbeltangens)\\b"
				},
				{
					"name": "keyword.operator.new.bitshift.ddp",
					"match": "um (\\d+) bit nach (?:links|rechts) verschoben",
					"captures": {
						"1": {
							"name": "constant.numeric.ddp"
						}
					}
				}
			]
		},
		"typ": {
			"patterns": [
				{
					"name": "support.type.ddp",
					"match": "\\b(die Zahl(?:en)?|die Kommazahl(?:en)?|der Boolean|der Buchstabe|der Text|die Booleans|die Buchstaben|die Texte)\\b\\s(\\w+)",
					"captures": {
						"2": {
							"name": "variable.name.ddp"
						}
					}
				},
				{
					"match": "(die \\w+ Struktur(?:en)?)",
					"captures": {
						"1": {
							"name": "support.class.type.ddp"
						}
					}
				}
			]
		},
		"typ-ohne-artikel": {
			"match": "\\b(Zahl(?:en)?|Kommazahl(?:en)?|Booleans?|Buchstaben?|Texte?|Typ)\\b\\s(\\w+)",
			"captures": {
				"1": {
					"name": "support.type.no-artikel.ddp"
				},
				"2": {
					"name": "variable.name.ddp"
				}
			}
		},
		"identifiers": {
			"match": "\\w+",
			"name": "variable.name.ddp"
		},
		"werte": {
			"patterns": [
				{
					"name": "string.quoted.double.ddp",
					"begin": "\"",
					"end": "\""
				},
				{
					"name": "string.quoted.single.ddp",
					"begin": "'",
					"end": "'"
				},
				{
					"name": "constant.language.boolean.ddp",
					"match": "wahr|falsch"
				},
				{
					"name": "constant.numeric.ddp",
					"match": "-?(\\d+,?\\d*)"
				},
				{
					"name": "constant.numeric.ddp",
					"match": "\\b(pi|e|tau|phi)\\b"
				}
			]
		}
	},
	"scopeName": "source.ddp"
}