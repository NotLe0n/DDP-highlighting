{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "DDP",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#function-call"
		},
		{
			"include": "#function-definition"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#type"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#types-without-Artikel"
		},
		{
			"include": "#identifiers"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line",
					"match": "(\/\/.*)"
				},
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.ddp"
						}
					},
					"end": "\\*/",
					"name": "comment.block.ddp"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ddp",
					"match": "\\b(wenn|dann|sonst|aber|für|jede|solange|mache|macht|zurück|gib|vom|von|bis|mit schrittgröße)\\b"
				},
				{
					"name": "keyword.other.ddp",
					"match": "\\b(ist|sind|an|der Stelle)\\b"
				}
			]
		},
		"function-call": {
			"beginCaptures": {
				"1":{
					"name": "entity.name.function.ddp"
				}
			},
			"begin": "(\\w+)\\(",
			"end": "\\)",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"function-definition": {
			"begin": "^(die Funktion)",
			"beginCaptures": {
				"1": {
					"name": "support.type.ddp"
				}
			},
			"end": "(macht):",
			"endCaptures": {
				"1": {
					"name": "keyword.control.ddp"
				}
			},
			"patterns": [
				{
					"include": "#function-call"
				},
				{
					"include": "#function-parameters"
				},
				{
					"include": "#function-type"
				}
			]
		},
		"function-type": {
			"match": "(vom) Typ \\bZahl|Kommazahl|Boolean|Zeichen|Zeichenkette|Zahlen|Kommazahlen|Zeichenketten\\b",
			"name": "support.type",
			"captures": {
				"1": {
					"name": "keyword.control.ddp"
				}
			}
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.new.ddp",
					"match": "\\b(oder|und|nicht|plus|minus|mal|durch|modulo|hoch|. wurzel von|logisch|kontra|gleich|ungleich|kleiner als|größer als|kleiner als, oder|größer als, oder|ln|Betrag)\\b"
				},
				{
					"name": "keyword.operator.new.ddp",
					"match": "der \\b(Sinus|Kosinus|Tangens|Arkussinus|Arkuskosinus|Arkustangens|Hyperbelsinus|Hyperbelkosinus|Hyperbeltangens)\\b"
				},
				{"include": "#bitshift-operator"}
			]
		},
		"bitshift-operator": {
			"match": "(um) \\d+ (bit nach (?:links|rechts) verschoben)",
			"captures": {
				"0": {
					"name": "constant.numeric.ddp"
				},
				"1": {
					"name": "keyword.operator.new.ddp"
				},
				"2": {
					"name": "keyword.operator.new.ddp"
				}
			}
		},
		"type": {
			"patterns": [
				{
					"name": "support.type.ddp",
					"match": "\\b(die Zahl|die Kommazahl|der Boolean|das Zeichen|die Zeichenkette|die Zahlen|die Kommazahlen|die Boolean|die Zeichen|die Zeichenketten)\\b\\s(\\w+)",
					"captures": {
						"2": {
							"name": "variable.name.ddp"
						}
					}
				}
			]
		},
		"types-without-Artikel": {
			"match": "\\b(Zahl|Kommazahl|Boolean|Zeichen|Zeichenkette|Zahlen|Kommazahlen|Zeichenketten|Typ)\\b\\s(\\w+)",
			"captures": {
				"1": {
					"name": "support.type.ddp"
				},
				"2": {
					"name": "variable.name.ddp"
				}
			}
		},
		"identifiers": {
			"match": "\\w+",
			"name": "variable.name.ddp"
		},
		"literals": {
			"patterns": [
				{
					"name": "string.quoted.double.ddp",
					"begin": "\"",
					"end": "\""
				},
				{
					"name": "string.quoted.single.ddp",
					"begin": "'",
					"end": "'"
				},
				{
					"name": "constant.language.boolean.ddp",
					"match": "wahr|falsch"
				},
				{
					
					"name": "constant.numeric.ddp",
					"match": "-?(\\d+,?\\d*)"
				},
				{
					"name": "constant.numeric.ddp",
					"match": "\\b(pi|e|tau|phi)\\b"
				}
			]
		}
	},
	"scopeName": "source.ddp"
}